{"version":3,"sources":["components/Login.js","components/PlaylistForm.js","components/NewPlaylist.js","components/ListSizing.js","components/Controls.js","components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Login","className","href","React","Component","PlaylistForm","options","i","push","key","value","onSubmit","this","props","createPlaylist","htmlFor","type","id","placeholder","title","playlistName","onChange","required","playlistDescription","playlistSize","size","dropdownSize","onFocus","onBlur","sizeChange","createSelectItems","defaultDescription","NewPlaylist","e","a","document","getElementById","innerHTML","preventDefault","playlistId","spotifyApi","getMe","then","response","name","state","description","getMyTopTracks","time_range","timeRange","limit","items","map","track","uri","trackURIs","addTracksToPlaylist","getPlaylist","setState","justCreated","getElementsByClassName","firstElementChild","textContent","src","images","url","external_urls","spotify","resetForm","modalShow","target","blur","Fragment","onClick","disabled","itemType","Modal","show","onHide","Header","aria-hidden","Body","alt","Footer","rel","ListSizing","data-toggle","changeListSize","defaultChecked","Controls","toggleItems","changeTimeRange","substring","ListItem","getGenres","genreArray","itemInfo","genres","length","replace","txt","charAt","toUpperCase","substr","toLowerCase","slice","genre","listSize","rank","link","image","albumLink","artwork","album","artistLink","artist","List","getHeader","header","getTracks","tracks","forEach","idx","trackObj","artists","getArtists","getMyTopArtists","artistObj","newType","Array","from","element","classList","App","token","getHashParams","access_token","loggedIn","SpotifyWebApi","setAccessToken","hashParams","r","q","window","location","hash","exec","decodeURIComponent","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2272f2da.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/Login.css\"\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div className=\"login-bg\">\n        <div className=\"login\">\n          <h1>Spotify Wrapped++</h1>\n          <p>\n            Want to view your top tracks and artists but don't want to wait\n            until December for Spotify Wrapped? Now you can with Spotify\n            Wrapped++!\n          </p>\n          <a href=\"https://peaceful-fortress-73033.herokuapp.com/login\">\n            <button className=\"spotify-btn\">Log in with Spotify</button>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass PlaylistForm extends React.Component {\n  createSelectItems() {\n    let options = [];\n    for (let i = 50; i >= 10; i--) {\n      options.push(\n        <option key={i} value={i}>\n          {i}\n        </option>\n      );\n    }\n    return options;\n  }\n\n  render() {\n    return (\n      <form className=\"modal-body\" onSubmit={this.props.createPlaylist}>\n        <div className=\"form-group\">\n          <label htmlFor=\"playlistName\">Playlist Name</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"playlistName\"\n            placeholder={this.props.title}\n            value={this.props.playlistName}\n            onChange={this.props.onChange}\n            required\n          ></input>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"playlistDescription\">Playlist Description</label>\n          <textarea\n            className=\"form-control\"\n            id=\"playlistDescription\"\n            value={this.props.playlistDescription}\n            onChange={this.props.onChange}\n          ></textarea>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleFormControlSelect2\">Playlist Size</label>\n          <select\n            className=\"form-control\"\n            id=\"exampleFormControlSelect2\"\n            value={this.props.playlistSize}\n            size={this.props.dropdownSize}\n            onFocus={this.props.onFocus}\n            onBlur={this.props.onBlur}\n            onChange={this.props.sizeChange}\n          >\n            {this.createSelectItems()}\n          </select>\n        </div>\n        <div id=\"submit\">\n          <button type=\"submit\" id=\"submit-btn\" className=\"spotify-btn\">\n            Create Playlist\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nPlaylistForm.propTypes = {\n  title: PropTypes.string.isRequired,\n  dropdownSize: PropTypes.number.isRequired,\n  playlistSize: PropTypes.string.isRequired,\n  playlistName: PropTypes.string.isRequired,\n  playlistDescription: PropTypes.string.isRequired,\n  createPlaylist: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  sizeChange: PropTypes.func.isRequired,\n};\n\nexport default PlaylistForm;\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport PropTypes from \"prop-types\";\nimport PlaylistForm from \"./PlaylistForm.js\";\nimport \"../css/NewPlaylist.css\";\n\nconst defaultDescription =\n  \"A playlist of my top tracks created by Spotify Rewind++\";\n\nclass NewPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownSize: 1,\n      playlistSize: \"50\",\n      playlistName: \"\",\n      playlistDescription: defaultDescription,\n      justCreated: false,\n      modalShow: false,\n    };\n  }\n\n  createPlaylist = async (e) => {\n    document.getElementById(\"submit-btn\").innerHTML =\n      '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Loading...';\n    e.preventDefault();\n    let id = null;\n    let playlistId = null;\n    await this.props.spotifyApi.getMe().then((response) => {\n      id = response.id;\n    });\n    await this.props.spotifyApi\n      .createPlaylist(id, {\n        name: this.state.playlistName,\n        description: this.state.playlistDescription,\n      })\n      .then((response) => {\n        playlistId = response.id;\n        // console.log(response);\n      });\n    await this.props.spotifyApi\n      .getMyTopTracks({\n        time_range: this.props.timeRange,\n        limit: this.state.playlistSize,\n      })\n      .then((response) => {\n        return response.items.map((track) => track.uri);\n      })\n      .then((trackURIs) => {\n        this.props.spotifyApi\n          .addTracksToPlaylist(playlistId, trackURIs)\n          .then(() => {\n            this.props.spotifyApi.getPlaylist(playlistId).then((response) => {\n              this.setState({ justCreated: true });\n              const modal = document.getElementsByClassName(\"modal-content\")[0];\n              modal.firstElementChild.firstElementChild.textContent =\n                \"Playlist Created!\";\n              // console.log(response);\n              // console.log(response.images[0].url);\\\n              document.getElementById(\"new-playlist-image\").src =\n                response.images[0].url;\n              document.getElementById(\"open-playlist\").href =\n                response.external_urls.spotify;\n            });\n          });\n      });\n  };\n\n  resetForm = () => {\n    document.getElementById(\"modal-title\").textContent = \"Playlist Details\";\n    this.setState({\n      playlistName: \"\",\n      playlistDescription: defaultDescription,\n      playlistSize: \"50\",\n      justCreated: false,\n      modalShow: false,\n    });\n  };\n\n  onChange = (e) => this.setState({ [e.target.id]: e.target.value });\n\n  onFocus = () => {\n    this.setState({ dropdownSize: 10 });\n  };\n\n  onBlur = () => {\n    this.setState({ dropdownSize: 1 });\n  };\n\n  sizeChange = (e) => {\n    e.target.blur();\n    this.setState({ playlistSize: e.target.value });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          type=\"button\"\n          className=\"spotify-btn control\"\n          onClick={() => this.setState({ modalShow: true })}\n          disabled={this.props.itemType}\n        >\n          Create Playlist\n        </button>\n        <Modal show={this.state.modalShow} onHide={this.resetForm}>\n          <Modal.Header className=\"modal-header text-center\">\n            <h5 id=\"modal-title\">Playlist Details</h5>\n            <button type=\"button\" className=\"close\" onClick={this.resetForm}>\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </Modal.Header>\n          {!this.state.justCreated && (\n            <Modal.Body className=\"modal-content\">\n              <PlaylistForm\n                title={this.props.title}\n                dropdownSize={this.state.dropdownSize}\n                playlistSize={this.state.playlistSize}\n                playlistName={this.state.playlistName}\n                playlistDescription={this.state.playlistDescription}\n                createPlaylist={this.createPlaylist}\n                onChange={this.onChange}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n                sizeChange={this.sizeChange}\n              ></PlaylistForm>\n            </Modal.Body>\n          )}\n          {this.state.justCreated && (\n            <React.Fragment>\n              <Modal.Body className=\"modal-content\">\n                <h2 className=\"text-center mt-3\">{this.state.playlistName}</h2>\n                <img\n                  id=\"new-playlist-image\"\n                  alt={`${this.state.playlistName} Cover`}\n                ></img>\n              </Modal.Body>\n              <Modal.Footer>\n                <a\n                  href=\"/#\"\n                  id=\"open-playlist\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <button className=\"spotify-btn\">Open Playlist</button>\n                </a>\n                <button\n                  onClick={this.resetForm}\n                  type=\"button\"\n                  className=\"spotify-btn-2\"\n                >\n                  Close\n                </button>\n              </Modal.Footer>\n            </React.Fragment>\n          )}\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nNewPlaylist.propTypes = {\n  itemType: PropTypes.bool.isRequired,\n  timeRange: PropTypes.string.isRequired,\n  spotifyApi: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default NewPlaylist;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ListSizing extends React.Component {\n  render() {\n    return (\n      <div className=\"btn-group control\" data-toggle=\"buttons\">\n        <button\n          className=\"btn list-sizing active\"\n          onClick={this.props.changeListSize}\n          value=\"large\"\n          id=\"ls-1\"\n        >\n          <input type=\"radio\" name=\"options\" defaultChecked></input>\n        </button>\n        <button\n          className=\"btn list-sizing\"\n          onClick={this.props.changeListSize}\n          value=\"medium\"\n          id=\"ls-2\"\n        >\n          <input type=\"radio\" name=\"options\"></input>\n        </button>\n        <button\n          className=\"btn list-sizing\"\n          onClick={this.props.changeListSize}\n          value=\"small\"\n          id=\"ls-3\"\n        >\n          <input type=\"radio\" name=\"options\"></input>\n        </button>\n      </div>\n    );\n  }\n}\n\nListSizing.propTypes = {\n  changeListSize: PropTypes.func.isRequired,\n};\n\nexport default ListSizing;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport NewPlaylist from \"./NewPlaylist.js\";\nimport ListSizing from \"./ListSizing.js\";\nimport \"../css/Controls.css\";\n\nclass Controls extends React.Component {\n  render() {\n    return (\n      <div className=\"controls\">\n        <div className=\"toggle control\">\n          <p className=\"toggle-label\">Tracks</p>\n          <input type=\"checkbox\" onChange={this.props.toggleItems}></input>\n          <p className=\"toggle-label\">Artists</p>\n        </div>\n        <select\n          className=\"spotify-btn-2 control\"\n          value={this.props.timeRange}\n          onChange={this.props.changeTimeRange}\n        >\n          <option value=\"short_term\">4 Weeks</option>\n          <option value=\"medium_term\">6 Months</option>\n          <option value=\"long_term\">All Time</option>\n        </select>\n        <NewPlaylist\n          itemType={this.props.itemType}\n          timeRange={this.props.timeRange}\n          spotifyApi={this.props.spotifyApi}\n          title={`My ${this.props.title[0].substring(5)} - ${\n            this.props.title[1]\n          }`}\n        ></NewPlaylist>\n        <ListSizing changeListSize={this.props.changeListSize}></ListSizing>\n      </div>\n    );\n  }\n}\n\nControls.propTypes = {\n  itemType: PropTypes.bool.isRequired,\n  timeRange: PropTypes.string.isRequired,\n  listSize: PropTypes.string.isRequired,\n  toggleItems: PropTypes.func.isRequired,\n  changeTimeRange: PropTypes.func.isRequired,\n  changeListSize: PropTypes.func.isRequired,\n  spotifyApi: PropTypes.object.isRequired,\n  title: PropTypes.array.isRequired,\n};\n\nexport default Controls;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../css/ListItem.css\";\n\nclass ListItem extends React.Component {\n  getGenres = () => {\n    const genreArray = [...this.props.itemInfo.genres];\n    let genres = \"\";\n    if (genreArray.length > 0) {\n      genres += genreArray[0].replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n      });\n      for (let genre of genreArray.slice(1)) {\n        genres += `, ${genre.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        })}`;\n      }\n    }\n    return genres;\n  };\n\n  render() {\n    if (this.props.itemType) {\n      return (\n        <div className={`list-group-item ${this.props.listSize}`}>\n          <p className={`rank ${this.props.listSize}`}>\n            {this.props.itemInfo.rank}.{\" \"}\n          </p>\n          <a\n            href={this.props.itemInfo.link}\n            target=\"_blank\"\n            className={`link ${this.props.listSize}`}\n            rel=\"noopener noreferrer\"\n          >\n            {this.props.itemInfo.name}\n          </a>\n          <img\n            src={this.props.itemInfo.image}\n            className={`list-image ${this.props.listSize}`}\n            alt={this.props.itemInfo.name}\n          />\n          <br />\n          <p className={`info ${this.props.listSize} genres`}>\n            {this.getGenres()}\n          </p>\n        </div>\n      );\n    } else {\n      return (\n        <div className={`list-group-item ${this.props.listSize}`}>\n          <p className={`rank ${this.props.listSize}`}>\n            {this.props.itemInfo.rank}.{\" \"}\n          </p>\n          <a\n            href={this.props.itemInfo.link}\n            target=\"_blank\"\n            className={`link ${this.props.listSize}`}\n            rel=\"noopener noreferrer\"\n          >\n            {this.props.itemInfo.name}\n          </a>{\" \"}\n          <a\n            href={this.props.itemInfo.albumLink}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src={this.props.itemInfo.artwork}\n              className={`list-image ${this.props.listSize}`}\n              alt={this.props.itemInfo.album}\n            />\n          </a>\n          <br />\n          <a\n            href={this.props.itemInfo.artistLink}\n            target=\"_blank\"\n            className={`info ${this.props.listSize}`}\n            rel=\"noopener noreferrer\"\n          >\n            {this.props.itemInfo.artist}\n          </a>\n        </div>\n      );\n    }\n  }\n}\n\nListItem.propTypes = {\n  itemType: PropTypes.bool.isRequired,\n  listSize: PropTypes.string.isRequired,\n  itemInfo: PropTypes.object.isRequired,\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Controls from \"./Controls.js\";\nimport ListItem from \"./ListItem.js\";\nimport \"../css/List.css\"\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemType: false, // false for tracks, true for artists\n      items: [],\n      timeRange: \"short_term\",\n      listSize: \"large\"\n    };\n  }\n\n  componentDidMount() {\n    this.getTracks().then((tracks) => this.setState({ items: tracks }));\n  }\n\n  getHeader = () => {\n    let header = \"Your Top \";\n    header += this.state.itemType ? \"Artists\" : \"Tracks\";\n    switch (this.state.timeRange) {\n      case \"short_term\":\n        return [header, \"Last 4 Weeks\"];\n      case \"medium_term\":\n        return [header, \"Last 6 Months\"];\n      case \"long_term\":\n        return [header, \"All Time\"];\n      default:\n        return \"error\";\n    }\n  };\n\n  getTracks = () => {\n    return this.props.spotifyApi\n      .getMyTopTracks({ time_range: this.state.timeRange, limit: \"50\" })\n      .then((response) => {\n        // console.log(response);\n        const tracks = [];\n        response.items.forEach((track, idx) => {\n          const trackObj = {\n            name: track.name,\n            artist: track.artists[0].name,\n            artistLink: track.artists[0].external_urls.spotify,\n            artwork: track.album.images[0].url,\n            album: track.album.name,\n            albumLink: track.album.external_urls.spotify,\n            link: track.external_urls.spotify,\n            rank: idx + 1\n          };\n          tracks.push(trackObj);\n        });\n        return tracks;\n      });\n  };\n\n  getArtists = () => {\n    return this.props.spotifyApi\n      .getMyTopArtists({ time_range: this.state.timeRange, limit: \"50\" })\n      .then((response) => {\n        // console.log(response);\n        const artists = [];\n        response.items.forEach((artist, idx) => {\n          const artistObj = {\n            name: artist.name,\n            image: artist.images[0].url,\n            link: artist.external_urls.spotify,\n            genres: artist.genres.slice(0, 3),\n            rank: idx + 1,\n          };\n          artists.push(artistObj);\n        });\n        return artists;\n      });\n  };\n\n  toggleItems = () => {\n    const newType = !this.state.itemType;\n    if (newType) {\n      this.getArtists().then((artists) => {\n        this.setState({ itemType: newType, items: artists });\n      });\n    } else {\n      this.getTracks().then((tracks) => {\n        this.setState({ itemType: newType, items: tracks });\n      });\n    }\n  };\n\n  changeTimeRange = async (e) => {\n    await this.setState({ timeRange: e.target.value });\n    if (this.state.itemType) {\n      this.getArtists().then((artists) => {\n        this.setState({ items: artists });\n      });\n    } else {\n      this.getTracks().then((tracks) => {\n        this.setState({ items: tracks });\n      });\n    }\n  };\n\n  changeListSize = (e) => {\n    const size = e.target.value;\n    Array.from(document.getElementsByClassName(this.state.listSize)).forEach(element => {\n      element.classList.replace(this.state.listSize, size)\n    })\n    this.setState({listSize: size});\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <header>\n          <h1>{this.getHeader()[0]}</h1>\n          <h2>{this.getHeader()[1]}</h2>\n        </header>\n        <Controls\n          itemType={this.state.itemType}\n          timeRange={this.state.timeRange}\n          listSize={this.state.listSize}\n          toggleItems={this.toggleItems}\n          changeTimeRange={this.changeTimeRange}\n          changeListSize={this.changeListSize}\n          spotifyApi={this.props.spotifyApi}\n          title={this.getHeader()}\n        ></Controls>\n        <div className=\"body\">\n          <div className=\"container pb-5 list-group\">\n            {this.state.items.map((itemInfo, idx) => {\n              return (\n                <ListItem\n                  itemType={this.state.itemType}\n                  listSize={this.state.listSize}\n                  itemInfo={itemInfo}\n                  key={idx}\n                ></ListItem>\n              );\n            })}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nList.propTypes = {\n  spotifyApi: PropTypes.object.isRequired,\n};\n\nexport default List;\n","import React, { Component } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport Login from \"./components/Login.js\";\nimport List from \"./components/List.js\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    this.state = {\n      loggedIn: token ? true : false,\n      spotifyApi: new SpotifyWebApi()\n    };\n    if (token) {\n      this.state.spotifyApi.setAccessToken(token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while ((e = r.exec(q))) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.loggedIn && (\n          <Login></Login>\n        )}\n        {this.state.loggedIn && (\n          <List spotifyApi={this.state.spotifyApi}></List>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}