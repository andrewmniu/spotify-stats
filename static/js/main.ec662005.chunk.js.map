{"version":3,"sources":["components/Login.js","components/PlaylistForm.js","components/NewPlaylist.js","components/ListSizing.js","components/Controls.js","components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Login","className","href","React","Component","PlaylistForm","options","i","push","key","value","onSubmit","this","props","createPlaylist","htmlFor","id","playlistType","onChange","e","getDefaultValues","target","type","placeholder","title","playlistName","required","playlistDescription","playlistSize","size","dropdownSize","onFocus","onBlur","sizeChange","createSelectItems","NewPlaylist","createSimilarPlaylist","topTracks","seeds","arr","n","result","Array","len","length","taken","RangeError","x","Math","floor","random","getRandom","items","map","track","spotifyApi","getRecommendations","limit","state","seed_tracks","then","response","tracks","uri","a","typeBool","document","getElementById","innerHTML","preventDefault","playlistId","getMe","name","description","getMyTopTracks","time_range","timeRange","trackURIs","addTracksToPlaylist","getPlaylist","setState","justCreated","getElementsByClassName","firstElementChild","textContent","src","images","url","external_urls","spotify","resetForm","modalShow","toLowerCase","blur","Fragment","onClick","disabled","itemType","Modal","show","onHide","Header","aria-hidden","Body","alt","Footer","rel","ListSizing","data-toggle","changeListSize","defaultChecked","Controls","toggleItems","changeTimeRange","ListItem","getGenres","genreArray","itemInfo","genres","replace","txt","charAt","toUpperCase","substr","slice","genre","listSize","rank","link","image","artistLink","artist","albumLink","artwork","album","List","getHeader","header","getTracks","forEach","idx","trackObj","artists","getArtists","getMyTopArtists","artistObj","newType","from","element","classList","App","token","getHashParams","access_token","loggedIn","SpotifyWebApi","setAccessToken","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec662005.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/Login.css\"\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div className=\"login-bg\">\n        <div className=\"login\">\n          <h1>Spotify Wrapped++</h1>\n          <p>\n            Want to view your top tracks and artists but don't want to wait\n            until December for Spotify Wrapped? Now you can with Spotify\n            Wrapped++!\n          </p>\n          <a href=\"https://peaceful-fortress-73033.herokuapp.com/login\">\n            <button className=\"spotify-btn\">Log in with Spotify</button>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass PlaylistForm extends React.Component {\n  createSelectItems() {\n    let options = [];\n    for (let i = 50; i >= 10; i--) {\n      options.push(\n        <option key={i} value={i}>\n          {i}\n        </option>\n      );\n    }\n    return options;\n  }\n\n  render() {\n    return (\n      <form className=\"modal-body\" onSubmit={this.props.createPlaylist}>\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleFormControlSelect\">Playlist Type</label>\n          <select\n            className=\"form-control\"\n            id=\"exampleFormControlSelect\"\n            value={this.props.playlistType}\n            onChange={(e) => this.props.getDefaultValues(e.target.value)}\n          >\n            <option>Top Tracks</option>\n            <option>Personalized Recommendations</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"playlistName\">Playlist Name</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"playlistName\"\n            placeholder={this.props.title}\n            value={this.props.playlistName}\n            onChange={this.props.onChange}\n            required\n          ></input>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"playlistDescription\">Playlist Description</label>\n          <textarea\n            className=\"form-control\"\n            id=\"playlistDescription\"\n            value={this.props.playlistDescription}\n            onChange={this.props.onChange}\n          ></textarea>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleFormControlSelect2\">Playlist Size</label>\n          <select\n            className=\"form-control\"\n            id=\"exampleFormControlSelect2\"\n            value={this.props.playlistSize}\n            size={this.props.dropdownSize}\n            onFocus={this.props.onFocus}\n            onBlur={this.props.onBlur}\n            onChange={this.props.sizeChange}\n          >\n            {this.createSelectItems()}\n          </select>\n        </div>\n        <div id=\"submit\">\n          <button type=\"submit\" id=\"submit-btn\" className=\"spotify-btn\">\n            Create Playlist\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nPlaylistForm.propTypes = {\n  title: PropTypes.string.isRequired,\n  dropdownSize: PropTypes.number.isRequired,\n  playlistSize: PropTypes.string.isRequired,\n  playlistType: PropTypes.string.isRequired,\n  playlistName: PropTypes.string.isRequired,\n  playlistDescription: PropTypes.string.isRequired,\n  createPlaylist: PropTypes.func.isRequired,\n  getDefaultValues: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  sizeChange: PropTypes.func.isRequired,\n};\n\nexport default PlaylistForm;\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport PropTypes from \"prop-types\";\nimport PlaylistForm from \"./PlaylistForm.js\";\nimport \"../css/NewPlaylist.css\";\n\nclass NewPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownSize: 1,\n      playlistType: \"Top Tracks\",\n      playlistName: \"\",\n      placeholder: \"\",\n      playlistDescription: \"\",\n      playlistSize: \"50\",\n      justCreated: false,\n      modalShow: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getDefaultValues(this.state.playlistType);\n  }\n\n  createSimilarPlaylist = (topTracks) => {\n    const seeds = [...getRandom(topTracks.items.map((track) => track.id))];\n\n    return this.props.spotifyApi\n      .getRecommendations({\n        limit: this.state.playlistSize,\n        seed_tracks: seeds,\n      })\n      .then((response) => {\n        return response.tracks.map((track) => track.uri);\n      });\n  };\n\n  createPlaylist = async (e) => {\n    const typeBool = this.state.playlistType === \"Top Tracks\";\n    const playlistSize = typeBool ? this.state.playlistSize : 25;\n    document.getElementById(\"submit-btn\").innerHTML =\n      '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Loading...';\n    e.preventDefault();\n    let id = null;\n    let playlistId = null;\n    await this.props.spotifyApi.getMe().then((response) => {\n      id = response.id;\n    });\n    await this.props.spotifyApi\n      .createPlaylist(id, {\n        name: this.state.playlistName,\n        description: this.state.playlistDescription,\n      })\n      .then((response) => {\n        playlistId = response.id;\n      });\n    await this.props.spotifyApi\n      .getMyTopTracks({\n        time_range: this.props.timeRange,\n        limit: playlistSize,\n      })\n      .then((topTracks) => {\n        if (typeBool) {\n          return topTracks.items.map((track) => track.uri);\n        } else {\n          return this.createSimilarPlaylist(topTracks);\n        }\n      })\n      .then((trackURIs) => {\n        this.props.spotifyApi\n          .addTracksToPlaylist(playlistId, trackURIs)\n          .then(() => {\n            this.props.spotifyApi.getPlaylist(playlistId).then((response) => {\n              this.setState({ justCreated: true });\n              const modal = document.getElementsByClassName(\"modal-content\")[0];\n              modal.firstElementChild.firstElementChild.textContent =\n                \"Playlist Created!\";\n              // console.log(response);\n              // console.log(response.images[0].url);\\\n              document.getElementById(\"new-playlist-image\").src =\n                response.images[0].url;\n              document.getElementById(\"open-playlist\").href =\n                response.external_urls.spotify;\n            });\n          });\n      });\n  };\n\n  resetForm = () => {\n    document.getElementById(\"modal-title\").textContent = \"Playlist Details\";\n    this.getDefaultValues(\"Top Tracks\");\n    this.setState({\n      playlistType: \"Top Tracks\",\n      playlistName: \"\",\n      playlistSize: \"50\",\n      justCreated: false,\n      modalShow: false,\n    });\n  };\n\n  getDefaultValues = (type) => {\n    const placeholder = \"My \" + type + \" - \" + this.props.title[1];\n    const playlistDescription = `A playlist of my ${type.toLowerCase()} created by Spotify Rewind++`;\n    this.setState({\n      playlistType: type,\n      placeholder,\n      playlistDescription,\n    });\n  };\n\n  onChange = (e) => this.setState({ [e.target.id]: e.target.value });\n\n  onFocus = () => {\n    this.setState({ dropdownSize: 10 });\n  };\n\n  onBlur = () => {\n    this.setState({ dropdownSize: 1 });\n  };\n\n  sizeChange = (e) => {\n    e.target.blur();\n    this.setState({ playlistSize: e.target.value });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          type=\"button\"\n          className=\"spotify-btn control grid-2-2\"\n          onClick={() => this.setState({ modalShow: true })}\n          disabled={this.props.itemType}\n        >\n          Create Playlist\n        </button>\n        <Modal show={this.state.modalShow} onHide={this.resetForm}>\n          <Modal.Header className=\"modal-header text-center\">\n            <h5 id=\"modal-title\">Playlist Details</h5>\n            <button type=\"button\" className=\"close\" onClick={this.resetForm}>\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </Modal.Header>\n          {!this.state.justCreated && (\n            <Modal.Body className=\"modal-content\">\n              <PlaylistForm\n                title={this.state.placeholder}\n                dropdownSize={this.state.dropdownSize}\n                playlistSize={this.state.playlistSize}\n                playlistType={this.state.playlistType}\n                playlistName={this.state.playlistName}\n                playlistDescription={this.state.playlistDescription}\n                createPlaylist={this.createPlaylist}\n                getDefaultValues={this.getDefaultValues}\n                onChange={this.onChange}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n                sizeChange={this.sizeChange}\n              ></PlaylistForm>\n            </Modal.Body>\n          )}\n          {this.state.justCreated && (\n            <React.Fragment>\n              <Modal.Body className=\"modal-content\">\n                <h2 className=\"text-center mt-3\">{this.state.playlistName}</h2>\n                <img\n                  id=\"new-playlist-image\"\n                  alt={`${this.state.playlistName} Cover`}\n                ></img>\n              </Modal.Body>\n              <Modal.Footer>\n                <a\n                  href=\"/#\"\n                  id=\"open-playlist\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <button className=\"spotify-btn\">Open Playlist</button>\n                </a>\n                <button\n                  onClick={this.resetForm}\n                  type=\"button\"\n                  className=\"spotify-btn-2\"\n                >\n                  Close\n                </button>\n              </Modal.Footer>\n            </React.Fragment>\n          )}\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nNewPlaylist.propTypes = {\n  itemType: PropTypes.bool.isRequired,\n  timeRange: PropTypes.string.isRequired,\n  spotifyApi: PropTypes.object.isRequired,\n  title: PropTypes.array.isRequired,\n};\n\nfunction getRandom(arr) {\n  let n = 5;\n  var result = new Array(n),\n    len = arr.length,\n    taken = new Array(len);\n  if (n > len)\n    throw new RangeError(\"getRandom: more elements taken than available\");\n  while (n--) {\n    var x = Math.floor(Math.random() * len);\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n\nexport default NewPlaylist;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ListSizing extends React.Component {\n  render() {\n    return (\n      <div className=\"btn-group control grid-1-2\" data-toggle=\"buttons\">\n        <button\n          className=\"btn list-sizing active\"\n          onClick={this.props.changeListSize}\n          value=\"large\"\n          id=\"ls-1\"\n        >\n          <input type=\"radio\" name=\"options\" defaultChecked></input>\n        </button>\n        <button\n          className=\"btn list-sizing\"\n          onClick={this.props.changeListSize}\n          value=\"medium\"\n          id=\"ls-2\"\n        >\n          <input type=\"radio\" name=\"options\"></input>\n        </button>\n        <button\n          className=\"btn list-sizing\"\n          onClick={this.props.changeListSize}\n          value=\"small\"\n          id=\"ls-3\"\n        >\n          <input type=\"radio\" name=\"options\"></input>\n        </button>\n      </div>\n    );\n  }\n}\n\nListSizing.propTypes = {\n  changeListSize: PropTypes.func.isRequired,\n};\n\nexport default ListSizing;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport NewPlaylist from \"./NewPlaylist.js\";\nimport ListSizing from \"./ListSizing.js\";\nimport \"../css/Controls.css\";\n\nclass Controls extends React.Component {\n  render() {\n    return (\n      <div className=\"controls\">\n        <div className=\"toggle control grid-1-1\">\n          <p className=\"toggle-label\">Tracks</p>\n          <input type=\"checkbox\" onChange={this.props.toggleItems}></input>\n          <p className=\"toggle-label\">Artists</p>\n        </div>\n        <select\n          className=\"spotify-btn-2 control grid-2-1\"\n          value={this.props.timeRange}\n          onChange={this.props.changeTimeRange}\n        >\n          <option value=\"short_term\">4 Weeks</option>\n          <option value=\"medium_term\">6 Months</option>\n          <option value=\"long_term\">All Time</option>\n        </select>\n        <NewPlaylist\n          itemType={this.props.itemType}\n          timeRange={this.props.timeRange}\n          spotifyApi={this.props.spotifyApi}\n          title={this.props.title}\n        ></NewPlaylist>\n        <ListSizing changeListSize={this.props.changeListSize}></ListSizing>\n      </div>\n    );\n  }\n}\n\nControls.propTypes = {\n  itemType: PropTypes.bool.isRequired,\n  timeRange: PropTypes.string.isRequired,\n  listSize: PropTypes.string.isRequired,\n  toggleItems: PropTypes.func.isRequired,\n  changeTimeRange: PropTypes.func.isRequired,\n  changeListSize: PropTypes.func.isRequired,\n  spotifyApi: PropTypes.object.isRequired,\n  title: PropTypes.array.isRequired,\n};\n\nexport default Controls;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../css/ListItem.css\";\n\nclass ListItem extends React.Component {\n  getGenres = () => {\n    const genreArray = [...this.props.itemInfo.genres];\n    let genres = \"\";\n    if (genreArray.length > 0) {\n      genres += genreArray[0].replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n      });\n      for (let genre of genreArray.slice(1)) {\n        genres += `, ${genre.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        })}`;\n      }\n    }\n    return genres;\n  };\n\n  render() {\n    if (this.props.itemType) {\n      return (\n        <div className={`list-group-item ${this.props.listSize}`}>\n          <p className={`rank ${this.props.listSize}`}>\n            {this.props.itemInfo.rank}.\n          </p>\n          <div className=\"info-container large\">\n            <a\n              href={this.props.itemInfo.link}\n              target=\"_blank\"\n              className={`link ${this.props.listSize}`}\n              rel=\"noopener noreferrer\"\n              >\n              {this.props.itemInfo.name}\n            </a>\n            <br />\n            <p className={`info ${this.props.listSize} genres`}>\n              {this.getGenres()}\n            </p>\n          </div>\n          <img\n            src={this.props.itemInfo.image}\n            className={`list-image ${this.props.listSize}`}\n            alt={this.props.itemInfo.name}\n          />\n        </div>\n      );\n    } else {\n      return (\n        <div className={`list-group-item ${this.props.listSize}`}>\n          <p className={`rank ${this.props.listSize}`}>\n            {this.props.itemInfo.rank}.\n          </p>\n          <div className=\"info-container large\">\n            <a\n              href={this.props.itemInfo.link}\n              target=\"_blank\"\n              className={`link ${this.props.listSize}`}\n              rel=\"noopener noreferrer\"\n              >\n              {this.props.itemInfo.name}\n            </a>\n            <br />\n            <a\n              href={this.props.itemInfo.artistLink}\n              target=\"_blank\"\n              className={`info ${this.props.listSize}`}\n              rel=\"noopener noreferrer\"\n              >\n              {this.props.itemInfo.artist}\n            </a>\n          </div>\n          <a\n            href={this.props.itemInfo.albumLink}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src={this.props.itemInfo.artwork}\n              className={`list-image ${this.props.listSize}`}\n              alt={this.props.itemInfo.album}\n            />\n          </a>\n        </div>\n      );\n    }\n  }\n}\n\nListItem.propTypes = {\n  itemType: PropTypes.bool.isRequired,\n  listSize: PropTypes.string.isRequired,\n  itemInfo: PropTypes.object.isRequired,\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Controls from \"./Controls.js\";\nimport ListItem from \"./ListItem.js\";\nimport \"../css/List.css\"\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemType: false, // false for tracks, true for artists\n      items: [],\n      timeRange: \"short_term\",\n      listSize: \"large\"\n    };\n  }\n\n  componentDidMount() {\n    this.getTracks().then((tracks) => this.setState({ items: tracks }));\n  }\n\n  getHeader = () => {\n    let header = \"Your Top \";\n    header += this.state.itemType ? \"Artists\" : \"Tracks\";\n    switch (this.state.timeRange) {\n      case \"short_term\":\n        return [header, \"Last 4 Weeks\"];\n      case \"medium_term\":\n        return [header, \"Last 6 Months\"];\n      case \"long_term\":\n        return [header, \"All Time\"];\n      default:\n        return \"error\";\n    }\n  };\n\n  getTracks = () => {\n    return this.props.spotifyApi\n      .getMyTopTracks({ time_range: this.state.timeRange, limit: \"50\" })\n      .then((response) => {\n        // console.log(response);\n        const tracks = [];\n        response.items.forEach((track, idx) => {\n          const trackObj = {\n            name: track.name,\n            artist: track.artists[0].name,\n            artistLink: track.artists[0].external_urls.spotify,\n            artwork: track.album.images[0].url,\n            album: track.album.name,\n            albumLink: track.album.external_urls.spotify,\n            link: track.external_urls.spotify,\n            rank: idx + 1\n          };\n          tracks.push(trackObj);\n        });\n        return tracks;\n      });\n  };\n\n  getArtists = () => {\n    return this.props.spotifyApi\n      .getMyTopArtists({ time_range: this.state.timeRange, limit: \"50\" })\n      .then((response) => {\n        // console.log(response);\n        const artists = [];\n        response.items.forEach((artist, idx) => {\n          const artistObj = {\n            name: artist.name,\n            image: artist.images[0].url,\n            link: artist.external_urls.spotify,\n            genres: artist.genres.slice(0, 3),\n            rank: idx + 1,\n          };\n          artists.push(artistObj);\n        });\n        return artists;\n      });\n  };\n\n  toggleItems = () => {\n    const newType = !this.state.itemType;\n    if (newType) {\n      this.getArtists().then((artists) => {\n        this.setState({ itemType: newType, items: artists });\n      });\n    } else {\n      this.getTracks().then((tracks) => {\n        this.setState({ itemType: newType, items: tracks });\n      });\n    }\n  };\n\n  changeTimeRange = async (e) => {\n    await this.setState({ timeRange: e.target.value });\n    if (this.state.itemType) {\n      this.getArtists().then((artists) => {\n        this.setState({ items: artists });\n      });\n    } else {\n      this.getTracks().then((tracks) => {\n        this.setState({ items: tracks });\n      });\n    }\n  };\n\n  changeListSize = (e) => {\n    const size = e.target.value;\n    Array.from(document.getElementsByClassName(this.state.listSize)).forEach(element => {\n      element.classList.replace(this.state.listSize, size)\n    })\n    this.setState({listSize: size});\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <header>\n          <h1>{this.getHeader()[0]}</h1>\n          <h2>{this.getHeader()[1]}</h2>\n        </header>\n        <Controls\n          itemType={this.state.itemType}\n          timeRange={this.state.timeRange}\n          listSize={this.state.listSize}\n          toggleItems={this.toggleItems}\n          changeTimeRange={this.changeTimeRange}\n          changeListSize={this.changeListSize}\n          spotifyApi={this.props.spotifyApi}\n          title={this.getHeader()}\n        ></Controls>\n        <div className=\"body\">\n          <div className=\"container pb-5 list-group\">\n            {this.state.items.map((itemInfo, idx) => {\n              return (\n                <ListItem\n                  itemType={this.state.itemType}\n                  listSize={this.state.listSize}\n                  itemInfo={itemInfo}\n                  key={idx}\n                ></ListItem>\n              );\n            })}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nList.propTypes = {\n  spotifyApi: PropTypes.object.isRequired,\n};\n\nexport default List;\n","import React, { Component } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport Login from \"./components/Login.js\";\nimport List from \"./components/List.js\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    this.state = {\n      loggedIn: token ? true : false,\n      spotifyApi: new SpotifyWebApi()\n    };\n    if (token) {\n      this.state.spotifyApi.setAccessToken(token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while ((e = r.exec(q))) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.loggedIn && (\n          <Login></Login>\n        )}\n        {this.state.loggedIn && (\n          <List spotifyApi={this.state.spotifyApi}></List>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}